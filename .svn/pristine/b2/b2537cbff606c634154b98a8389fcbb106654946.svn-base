package com.zqkj.bsm.action;import java.io.BufferedReader;import java.io.IOException;import java.io.OutputStream;import java.io.UnsupportedEncodingException;import java.text.SimpleDateFormat;import java.util.ArrayList;import java.util.Date;import java.util.Enumeration;import java.util.HashMap;import java.util.Iterator;import java.util.List;import java.util.Map;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import javax.servlet.http.HttpSession;import net.sf.json.JSONObject;import org.apache.log4j.Logger;import org.apache.struts2.interceptor.ServletRequestAware;import org.apache.struts2.interceptor.ServletResponseAware;import org.json.simple.JSONValue;import org.snaker.engine.access.Page;import org.snaker.engine.access.QueryFilter;import org.snaker.engine.entity.HistoryOrder;import org.snaker.engine.entity.HistoryTask;import org.snaker.engine.entity.Process;import org.snaker.engine.entity.Task;import org.snaker.engine.entity.WorkItem;import org.snaker.engine.helper.StringHelper;import org.snaker.engine.model.TaskModel;import org.snaker.engine.model.TaskModel.TaskType;import org.springframework.beans.factory.annotation.Autowired;import com.cudatec.flow.framework.service.ApprovalManager;import com.cudatec.flow.framework.service.SnakerEngineFacets;import com.cudatec.flow.framework.util.ConvertUtils;import com.google.gson.Gson;import com.opensymphony.xwork2.ActionSupport;import com.zqkj.bsm.dal.bean.Admin;import com.zqkj.bsm.system.action.SysPara;import com.zqkj.bsm.system.action.dao.SysUserDao;import com.zqkj.bsm.util.ClientInfoUtils;import com.zqkj.bsm.util.CommonUtil;import com.zqkj.bsm.util.ExcelModel;import com.zqkj.bsm.util.ExcelOperator;public class BaseAction extends ActionSupport implements ServletRequestAware,ServletResponseAware{	private static final long serialVersionUID = 1L;	protected HttpServletRequest request;	protected HttpServletResponse response;	protected HttpSession session;	protected Logger log = Logger.getLogger(this.getClass());	protected static final String BATCH_SQL = "insert into flow_form (html_key,html_value,orderId,task_id) values (?,?,?,?)";	protected static final String TASK_SQL = "insert into wf_task_actor (task_Id,actor_Id) values (?,?)";	protected static final String UPDATE_SQL = "update flow_form set html_value = ? where html_key = ? and  orderId = ?";	public int page_num = SysPara.page_num;	public void setServletRequest(HttpServletRequest request){		this.request = request;		this.session = request.getSession();	}	public void setServletResponse(HttpServletResponse response){		this.response = response;	}	protected SimpleDateFormat dateFormat = new SimpleDateFormat("yyyy年 MM月 dd日");	@Autowired	protected ApprovalManager manager;	@Autowired	protected SnakerEngineFacets facets;		public Map<String, Object> from2Map(HttpServletRequest request) 	{  		Map<String, Object> map_res = new HashMap<String, Object>();        Enumeration<?> names = request.getParameterNames();          String name = null;          Object value = null;         while (names.hasMoreElements())        {             name = (String) names.nextElement();             value = request.getParameter(name);             map_res.put(name, value);        }         return map_res;    }	/**	 * 返回json数据到前台	 * 	 * @param request	 * @param response	 * @param object	 */	protected void writeJson(HttpServletResponse response, Object object) {		response.addHeader("Cache-Control", "no-cache");		response.addHeader("Pragma", "no-cache");		response.addHeader("Expires", "-1");		response.setContentType("text/html; charset=UTF-8");		try {			String json = JSONValue.toJSONString(object);			if (null != json) {//				System.out.println(json);				response.getWriter().print(json);			}		} catch (Exception e) {			log.error("查询出错！", e);			response.setContentType("text/plain;charset=UTF-8");			response.setStatus(300);			response.setHeader("Error-Json",					"{\"code\":\"Exception\",\"msg\":\"系统内部错误！\"}");		}	}			protected void writeJson_Str(HttpServletResponse response, String object) 	{		response.addHeader("Cache-Control", "no-cache");		response.addHeader("Pragma", "no-cache");		response.addHeader("Expires", "-1");		response.setContentType("text/html; charset=UTF-8");		try {			if (null != object) {				response.getWriter().print(object);			}		} catch (Exception e) {			log.error("查询出错！", e);			response.setContentType("text/plain;charset=UTF-8");			response.setStatus(300);			response.setHeader("Error-Json",					"{\"code\":\"Exception\",\"msg\":\"系统内部错误！\"}");		}	}		/**	 * 返回json数据到前台	 * 	 * @param request	 * @param response	 * @param object	 */	protected void writeGson(HttpServletResponse response, Object object) {		response.addHeader("Cache-Control", "no-cache");		response.addHeader("Pragma", "no-cache");		response.addHeader("Expires", "-1");		response.setContentType("text/html; charset=UTF-8");		try {			Gson gson = new Gson();			String json = gson.toJson(object);			if (null != json) {				response.getWriter().print(json);			}		} catch (Exception e) {			log.error("查询出错！", e);			response.setContentType("text/plain;charset=UTF-8");			response.setStatus(300);			response.setHeader("Error-Json",					"{\"code\":\"Exception\",\"msg\":\"系统内部错误！\"}");		}	}	/**	 * 读取json	 *	 * @author cj	 * @param request	 * @return	 * @throws Exception	 */	protected JSONObject readJson(HttpServletRequest request) {		JSONObject jsonObject = new JSONObject();		try {			Map<?, ?> parameterMap = request.getParameterMap();			Iterator<?> paIter = parameterMap.keySet().iterator();			while (paIter.hasNext()) {				String key = paIter.next().toString();				String[] values = (String[])parameterMap.get(key);				jsonObject.put(key, values[0]);			}			log.debug("从客户端获得json=" + jsonObject.toString());		} catch (Exception e) {			log.error("获取json数据出错，错误信息如下：" + e.getMessage());		}		return jsonObject;	}				  //得到参数	protected String readJSONStringFromRequestBody(HttpServletRequest request) 	  {	    StringBuffer json = new StringBuffer();	    String line = null;	    try {	      BufferedReader reader = request.getReader();	      while ( (line = reader.readLine()) != null) 	      {	        json.append(line);	      }	    }	    catch (Exception e) 	    {	      log.info("Error reading JSON string: " + e.toString());	    }	    return json.toString();	  }			protected String  ecodeStr(String str) throws UnsupportedEncodingException {        return str == null ? "" : new String(str.getBytes("iso-8859-1"), "UTF-8");    }	public int getPage_num() {		return page_num;	}	public void setPage_num(int page_num) {		this.page_num = page_num;	}			 	public  Map<String, Object> dealParams(Enumeration<String> paraNames,String title)    {    	Map<String, Object> params = new HashMap<String, Object>();    	 while (paraNames.hasMoreElements())     	 {             String element = paraNames.nextElement();             int index = element.indexOf("_");             String paraValue = request.getParameter(element);             if(index == -1)              {            	 if(title!=null && !title.equals(""))            	 {	            	 if(element.toLowerCase().indexOf(title)> -1 || element.toLowerCase().indexOf("step")> -1)	            	 {	            		 params.put(element, paraValue);	            	 }                   	 }            	 else            	 {            		 params.put(element, paraValue);            	 }             }              else              {                 char type = element.charAt(0);                 String name = element.substring(index + 1);                 Object value = null;                 switch(type) {                     case 'S':                         value = paraValue;                         params.put(name, value);                         break;                     case 'I':                         value = ConvertUtils.convertStringToObject(paraValue, Integer.class);                         params.put(name, value);                         break;                     case 'L':                         value = ConvertUtils.convertStringToObject(paraValue, Long.class);                         params.put(name, value);                         break;                     case 'B':                         value = ConvertUtils.convertStringToObject(paraValue, Boolean.class);                         params.put(name, value);                         break;                     case 'D':                         value = ConvertUtils.convertStringToObject(paraValue, Date.class);                         params.put(name, value);                         break;                     case 'N':                         value = ConvertUtils.convertStringToObject(paraValue, Double.class);                         params.put(name, value);                         break;                     default:                          value = paraValue;                       	 if(title!=null && !title.equals(""))                    	 {        	            	 if(element.toLowerCase().indexOf(title)> -1 || element.toLowerCase().indexOf("step")> -1)        	            	 {        	            		 params.put(element, value);        	            	 }                           	 }                    	 else                    	 {                    		 params.put(element, value);                    	 }                         break;                 }                             }         }    	 return params;    }    	protected Map<String,Object> getTaskPages(SnakerEngineFacets facets,String processId,String[] assignees,			Page<WorkItem> majorPage,Page<WorkItem> aidantPage,Page<HistoryOrder> ccorderPage)	{		Map<String,Object> return_map = new HashMap<String,Object>();        List<WorkItem> aidantWorks=null;        List<HistoryOrder> ccWorks=null;        List<WorkItem> majorWorks = null;        if(StringHelper.isNotEmpty(processId)){        	majorWorks = facets.getEngine().query().getWorkItems(majorPage, new QueryFilter().setProcessId(processId).setOperators(assignees).setTaskType(TaskType.Major.ordinal()));        }else{        	majorWorks = facets.getEngine().query().getWorkItems(majorPage, new QueryFilter().setOperators(assignees).setTaskType(TaskType.Major.ordinal()));        }        aidantWorks = facets.getEngine()                .query()                .getWorkItems(aidantPage, new QueryFilter()                .setOperators(assignees)                .setTaskType(TaskType.Aidant.ordinal()));        ccWorks = facets.getEngine()                .query()                .getCCWorks(ccorderPage, new QueryFilter()                .setOperators(assignees)                .setState(1));        for(WorkItem map:majorWorks)        {        	String item_str = CommonUtil.nullToDefault(map.getTaskVariable(), "{}");        	JSONObject Source =JSONObject.fromObject(item_str);        	String title = Source.containsKey("title") ? Source.getString("title") : "";        	map.setTaskVariable(title);        	if(map.getInstanceUrl().indexOf("/")!=0)        	{        		String url = "/"+map.getInstanceUrl();        		map.setInstanceUrl(url);        	}        }        return_map.put("majorWorks", majorWorks);        return_map.put("aidantWorks", aidantWorks);        return_map.put("ccWorks", ccWorks);               return return_map;	}			/**	 * 导出的公共方法	 * @throws IOException 	 */	protected void exportGK(List<Map<String, Object>> items,Map<String, String> map_columns,String file_name) throws IOException	{		OutputStream out = response.getOutputStream();        // 清空输出流        response.reset();        // 设置响应头和下载保存的文件名           SimpleDateFormat df = new SimpleDateFormat("yyyyMMdd");        	response.setHeader(        			"content-disposition",        			"attachment;filename=" + new String((file_name+"-"+ df.format(new Date()) + ".xls").getBytes("GB2312"),"ISO8859-1"));        // 定义输出类型        response.setContentType("APPLICATION/msexcel");        ExcelModel downExcel = new ExcelModel();        downExcel.setSheetName(file_name);        ArrayList<String> headerList = new ArrayList<String>();        for (Map.Entry<String, String> entry : map_columns.entrySet())         {          	   headerList.add(entry.getValue());        }        downExcel.setHeader(headerList);        ArrayList<ArrayList<Object>> dataList = new ArrayList<ArrayList<Object>>();        for (int i = 0,len=items.size(); i < len; i++)         {        	Map<String, Object> row = items.get(i);            ArrayList<Object> dataline = new ArrayList<Object>();            for (Map.Entry<String, String> entry : map_columns.entrySet())             {            	  String key = entry.getKey();            	  dataline.add(row.get(key)==null?"":row.get(key));            }            dataList.add(dataline);        }        downExcel.setData(dataList);        ExcelOperator op = new ExcelOperator();        // out:传入的输出流        try {            op.WriteExcel(downExcel, out);        } catch (Exception e) {            e.printStackTrace();        }        out.close();        // 这一行非常关键，否则在实际中有可能出现莫名其妙的问题！！！        response.flushBuffer();// 强行将响应缓存中的内容发送到目的地    }  			/**	 * 添加提醒	* @Title: addMsg 	* @Description: TODO(这里用一句话描述这个方法的作用) 	* @param @param ob	用户	* @param @param orderId 	* @param @param newTaskId 	最新流程taskId	* @param @param processId	* @param @param message_content 流程打开action	* @param @param displayName    设定文件  流程名称	* @return void    返回类型 	* @throws	 */	public void addMsg(String ob,String orderId,String newTaskId,String processId,String message_content,String sa){		Map<String, Object> map_message = new HashMap<String, Object>();		String disPlayName = "";		String truename="";			if(StringHelper.isNotEmpty(processId))			{				disPlayName = facets.getEngine().process().getProcessById(processId).getModel().getDisplayName();				String username="";				List<HistoryTask> list = facets.getEngine().query().getHistoryTasks(new QueryFilter().setOrderId(orderId));	    		for (HistoryTask historyTask : list) 	    		{	    			 if(historyTask.getParentTaskId().equals("start"))	    			 {	    			   username = historyTask.getOperator();	    			   break;	    			 }				}	    		Map<String, Object> map = SysUserDao.getInstance().getUserInfo(username);	    		truename = map==null?"":String.valueOf(map.get("TRUENAME"));			}		map_message.put("user_id", ob);		map_message.put("orderId", orderId);		map_message.put("taskId", newTaskId);		map_message.put("processId", processId);		map_message.put("message_content", message_content+"?random=1");		map_message.put("display_name", disPlayName+":" + sa);		map_message.put("fq_truename", truename);		manager.insertMessage(map_message);	}			public Map<String, Object> changeParam(Map<String, Object> params,String taskName){		 Map<String, Object> newParams = new HashMap<String,Object>();	        for (String key : params.keySet()) {				if(key.equals("method") || key.equals("suggest")){					newParams.put(taskName+key, params.get(key));				}else{					newParams.put(key, params.get(key));				}			}		return newParams;	}			public Map<String, String> nextFlowHandle(String orderId,String taskId,String taskName,Map<String, Object> params,			String method,Admin admin,String processId){		params.put("ip", ClientInfoUtils.getIP(request));		Map<String, String> obj = new HashMap<String,String>();		String startUser = null;		String status = "0";		List<Task> task = null;    	List<HistoryTask> list = facets.getEngine().query().getHistoryTasks(new QueryFilter().setOrderId(orderId));		for (HistoryTask historyTask : list) {			//判断当前流程是否执行过,并且不是转发任务			JSONObject object =JSONObject.fromObject(historyTask.getVariable());			String oldMethod = object.get("method") != null ? object.get("method").toString() : "";			if(historyTask.getTaskName().equals(taskName) && !oldMethod.equals("1")){				status = "1";			}			//获取返回步骤操作人,此操作在回驳中调用,获取回驳的对象			if(params.get("taskBack") != null && historyTask.getTaskName().equals(params.get("taskBack").toString())){				startUser = historyTask.getOperator();			}		}		//領導同意，或下一步流程		params.put("method", method);    	if(method.equals("0")){    		task = facets.execute(taskId, admin.getName(),params);    	}else{    	//領導不同意    		task = facets.executeAndJump(taskId, admin.getName(),params, params.get("taskBack").toString());    		facets.addTaskActor(task.get(0).getId(), 0, new Object[]{startUser});    		//添加驳回用户    		obj.put("startUser", startUser);    	}    	    	//当上一步流程用户为空时，调用    	if(params.get("assignee") != null && params.get("assignee").toString().equals("-2")){    		 list = facets.getEngine().query().getHistoryTasks(new QueryFilter().setOrderId(orderId));    		 for (HistoryTask historyTask : list) {				if(historyTask.getParentTaskId().equals("start")){					params.put("userList", historyTask.getOperator() + ",");				}			}    		     	}    	        //审批完成后，去掉提醒        manager.updateMessage(admin.getName(), taskId, orderId);    	String newTaskId = (task.size() != 0)  ? task.get(0).getId() :"-1";    	String displayName   = (task.size() != 0)  ? task.get(0).getDisplayName() :"";    	String tasktype="0";    	if(task.size() != 0)    	{    		String task_Name = task.get(0).getTaskName();        	Process process = facets.getEngine().process().getProcessById(processId);            List<TaskModel> models = process.getModel().getModels(TaskModel.class);            for(TaskModel model:models)            {    	        if(model.getName().equals(task_Name))    	        {    		        if(model.getPerformType().equals("ALL"))    		        {    		        	tasktype = "1";    		        }    	        }            }                  	}    	obj.put("tasktype", tasktype);    	//增加提醒		obj.put("status", String.valueOf(status));		obj.put("newTaskId", newTaskId);		obj.put("displayName", displayName);		return obj;	}				/**	 * 流程自由跳转	 * @param orderId	 * @param taskId	 * @param taskName	 * @param params	 * @param method	 * @param admin	 * @param processId	 * @return	 */	public Map<String, String> zyFlowHandle(String orderId,String taskId,String jump_task_Name,Map<String, Object> params,			Admin admin,String processId,String IP)	{			Map<String, String> obj = new HashMap<String,String>();			String status = "0";			List<Task> task = null;    	   //自由跳转到指定步骤			Map<String, Object> mapIp = new HashMap<String, Object>();			mapIp.put("ip", IP);			task = facets.executeAndJump(taskId, admin.getName(),mapIp, jump_task_Name);				        //审批完成后，去掉提醒	        manager.updateMessage(admin.getName(), taskId, orderId);	    	String newTaskId = (task.size() != 0)  ? task.get(0).getId() :"-1";	    	String displayName   = (task.size() != 0)  ? task.get(0).getDisplayName() :"";	    	if(task.size() != 0)	    	{	    		String task_Name = task.get(0).getTaskName();	    		String tasktype="0";	        	Process process = facets.getEngine().process().getProcessById(processId);	            List<TaskModel> models = process.getModel().getModels(TaskModel.class);	            for(TaskModel model:models)	            {	    	        if(model.getName().equals(task_Name))	    	        {	    		        if(model.getPerformType().equals("ALL"))	    		        {	    		        	tasktype = "1";	    		        		    		        }	    	        }	            }  	            obj.put("tasktype", tasktype);	    	}    	//增加提醒		obj.put("status", String.valueOf(status));		obj.put("newTaskId", newTaskId);		obj.put("displayName", displayName);		return obj;	}		/**	 * 	 * 	 * 获取流程发起人名称，和第一步流程名称	* @Title: getFirstStep 	* @Description: TODO(这里用一句话描述这个方法的作用) 	* @param @param orderId	* @param @return    设定文件 	* @return Map<String,Object>    返回类型 	* @throws	 */	public Map<String, Object> getFirstStep(String orderId){		List<HistoryTask> listHisTask = facets.getEngine().query().getHistoryTasks(new QueryFilter().setOrderId(orderId));		Map<String, Object> map = new HashMap<String, Object>();		for (HistoryTask historyTask : listHisTask) {			if(historyTask.getParentTaskId().equals("start")){				map.put("operator", historyTask.getOperator());				map.put("taskName", historyTask.getTaskName());			}		}		return map;	}	/*	 * 	 * 查询当前啊任务状态	 * 	 * repeat  当流程已处理完毕，历史表中存在，适用于串行流程	 * over 改流程已经结果，适用于会签	 * success 任务可以执行	 */	public String TaskStatus(String orderId,String taskId,Admin admin){		String message = null;		List<HistoryTask> listHIs = facets.getEngine().query().getHistoryTasks(new QueryFilter().setOrderId(orderId));		//这里很奇怪，参数给的很详细还是不能查出指定数据，看来只能遍历，艹		for (HistoryTask historyTask : listHIs) {			if(historyTask.getId().equals(taskId)){				//审批完成后，去掉提醒	            manager.updateMessage(admin.getName(), taskId, orderId);	            message = "repeat";			}		}		if(message == null){			List<Task> listTask = facets.getEngine().query().getActiveTasks(new QueryFilter().setOrderId(orderId).setTaskId(taskId));			for (Task task : listTask) {				if(task.getId().equals(taskId)){					message = "success";				}			}			if(message == null){				//审批完成后，去掉提醒	            manager.updateMessage(admin.getName(), taskId, orderId);				message = "over";			}		}		return message;	}}