package com.zqkj.bsm.action;import java.io.BufferedReader;import java.io.File;import java.io.FileOutputStream;import java.io.IOException;import java.io.InputStream;import java.io.InputStreamReader;import java.text.SimpleDateFormat;import java.util.Arrays;import java.util.Date;import java.util.Enumeration;import java.util.HashMap;import java.util.Iterator;import java.util.Map;import java.util.Random;import javax.servlet.http.HttpServletRequest;import javax.servlet.http.HttpServletResponse;import javax.servlet.http.HttpSession;import org.apache.commons.lang.StringUtils;import org.apache.log4j.Logger;import org.apache.struts2.interceptor.ServletRequestAware;import org.apache.struts2.interceptor.ServletResponseAware;import org.json.JSONObject;import org.json.simple.JSONValue;import org.springframework.web.multipart.MultipartFile;import com.opensymphony.xwork2.ActionSupport;public class ClientBaseAction extends ActionSupport implements ServletRequestAware,ServletResponseAware{	private static final long serialVersionUID = 1L;	protected HttpServletRequest request;	protected HttpServletResponse response;	protected HttpSession session;	protected Logger log = Logger.getLogger(this.getClass());	public void setServletRequest(HttpServletRequest request){		this.request = request;		this.session = request.getSession();	}	public void setServletResponse(HttpServletResponse response){		this.response = response;	}		public Map<String, Object> from2Map(HttpServletRequest request) 	{  		Map<String, Object> map_res = new HashMap<String, Object>();        Enumeration<?> names = request.getParameterNames();          String name = null;          Object value = null;         while (names.hasMoreElements())        {             name = (String) names.nextElement();             value = request.getParameter(name);             map_res.put(name, value);        }         return map_res;    }  	/**	 * 返回json数据到前台	 * 	 * @param request	 * @param response	 * @param object	 */	protected void writeJson(HttpServletResponse response, Object object) {		response.addHeader("Cache-Control", "no-cache");		response.addHeader("Pragma", "no-cache");		response.addHeader("Expires", "-1");		response.setContentType("text/html; charset=UTF-8");		try {			String json = JSONValue.toJSONString(object);;			if (null != json) {				response.getWriter().print(json);			}		} catch (Exception e) {			log.error("查询出错！", e);			response.setContentType("text/plain;charset=UTF-8");			response.setStatus(300);			response.setHeader("Error-Json",					"{\"code\":\"Exception\",\"msg\":\"系统内部错误！\"}");		}	}			protected void writeJson_client(HttpServletResponse response, Object object) {		response.addHeader("Cache-Control", "no-cache");		response.addHeader("Pragma", "no-cache");		response.addHeader("Expires", "-1");		response.setContentType("application/json; charset=UTF-8");		try {			String json = JSONValue.toJSONString(object);;			if (null != json) {				response.getWriter().print(json);			}		} catch (Exception e) {			log.error("查询出错！", e);			response.setContentType("text/plain;charset=UTF-8");			response.setStatus(300);			response.setHeader("Error-Json",					"{\"code\":\"Exception\",\"msg\":\"系统内部错误！\"}");		}	}		protected void writeJson_Str(HttpServletResponse response, String object) 	{		response.addHeader("Cache-Control", "no-cache");		response.addHeader("Pragma", "no-cache");		response.addHeader("Expires", "-1");		response.setContentType("text/html; charset=UTF-8");		try {			if (null != object) {				response.getWriter().print(object);			}		} catch (Exception e) {			log.error("查询出错！", e);			response.setContentType("text/plain;charset=UTF-8");			response.setStatus(300);			response.setHeader("Error-Json",					"{\"code\":\"Exception\",\"msg\":\"系统内部错误！\"}");		}	}		/**	 * 读取json	 *	 * @author cj	 * @param request	 * @return	 * @throws Exception	 */	@SuppressWarnings("unchecked")	protected JSONObject readJson(HttpServletRequest request) {		JSONObject jsonObject = new JSONObject();		try {			Map parameterMap = request.getParameterMap();			Iterator paIter = parameterMap.keySet().iterator();			while (paIter.hasNext()) {				String key = paIter.next().toString();				String[] values = (String[])parameterMap.get(key);				jsonObject.put(key, values[0]);			}			log.debug("从客户端获得json=" + jsonObject.toString());		} catch (Exception e) {			log.error("获取json数据出错，错误信息如下：" + e.getMessage());		}		return jsonObject;	}				  //得到参数	protected String readJSONStringFromRequestBody(HttpServletRequest request) 	  {	    StringBuffer json = new StringBuffer();	    String line = null;	    try {	    		        BufferedReader reader = new BufferedReader(new InputStreamReader(request.getInputStream(),"UTF-8"));	    	//BufferedReader reader = request.getReader();	      while ( (line = reader.readLine()) != null) 	      {	        json.append(line);	      }	    }	    catch (Exception e) 	    {	      log.info("Error reading JSON string: " + e.toString());	    }	    return json.toString();	  }				@SuppressWarnings("unchecked")	protected JSONObject saveFile(String savePath, String saveUrl, String folder, String max, Map<String, String>extMap, MultipartFile file) 	{		JSONObject result = new JSONObject();		String message = "你已成功上传文件";		String fileExt = file.getOriginalFilename().substring(file.getOriginalFilename().lastIndexOf(".") + 1)				.toLowerCase();		String dirName = "image";		if (!Arrays.<String> asList(extMap.get(dirName).split(",")).contains(fileExt)) 		{			message = "对不起,你上传的文件格式不允许!!!";			result.put("message", message);			return result;		}		// 最大文件大小		long maxSize = Long.parseLong(max);		if (file.getSize() > maxSize) {			message = "上传文件过大";			result.put("message", message);			return result;		}		if (StringUtils.isEmpty(folder)) 		{			savePath += "article/";			saveUrl += "article/";		} 		else 		{			savePath += folder + "/";			saveUrl += folder + "/";		}		// 检查目录		File uploadDir = new File(savePath);		if (!uploadDir.isDirectory()) {			uploadDir.mkdirs();		}		// 检查目录写权限		if (!uploadDir.canWrite()) {			message = "上传目录没有写权限。";			result.put("message", message);			return result;		}		SimpleDateFormat sdf = new SimpleDateFormat("yyyyMMdd");		String ymd = sdf.format(new Date());		savePath += ymd + "/";		saveUrl += ymd + "/";		File dirFile = new File(savePath);		if (!dirFile.exists()) {			dirFile.mkdirs();		}		SimpleDateFormat df = new SimpleDateFormat("yyyyMMddHHmmss");		String newFileName = df.format(new Date()) + "_" + new Random().nextInt(1000) + "." + fileExt;		try {			SaveFileFormInputStream(file.getInputStream(), savePath, newFileName);		} catch (Exception e) {			log.error(e.getMessage() + e.getCause());			message = "对不起,文件上传失败了!!!!";		}		result.put("message", message);		result.put("file", ymd + "/" + newFileName);		result.put("url", saveUrl + newFileName);		return result;	}			protected void SaveFileFormInputStream(InputStream inputStream, String path, String fileName) throws IOException 	{		FileOutputStream fs = new FileOutputStream(path + "/" + fileName);		byte[] buffer = new byte[1024 * 1024];		int buteread = 0;		while ((buteread = inputStream.read(buffer)) != -1) {			fs.write(buffer, 0, buteread);			fs.flush();		}		fs.close();		inputStream.close();	}			protected String escape(String src) 	{		  int i;		  char j;		  StringBuffer tmp = new StringBuffer();		  tmp.ensureCapacity(src.length() * 6);		  for (i = 0; i < src.length(); i++) {		   j = src.charAt(i);		   if (Character.isDigit(j) || Character.isLowerCase(j)		     || Character.isUpperCase(j))		    tmp.append(j);		   else if (j < 256) {		    tmp.append("%");		    if (j < 16)		     tmp.append("0");		    tmp.append(Integer.toString(j, 16));		   } else {		    tmp.append("%u");		    tmp.append(Integer.toString(j, 16));		   }		  }		  return tmp.toString();		 }		  		 		  	     protected String unescape(String src) 		 {		  StringBuffer tmp = new StringBuffer();		  tmp.ensureCapacity(src.length());		  int lastPos = 0, pos = 0;		  char ch;		  while (lastPos < src.length()) {		   pos = src.indexOf("%", lastPos);		   if (pos == lastPos) {		    if (src.charAt(pos + 1) == 'u') {		     ch = (char) Integer.parseInt(src		       .substring(pos + 2, pos + 6), 16);		     tmp.append(ch);		     lastPos = pos + 6;		    } else {		     ch = (char) Integer.parseInt(src		       .substring(pos + 1, pos + 3), 16);		     tmp.append(ch);		     lastPos = pos + 3;		    }		   } else {		    if (pos == -1) {		     tmp.append(src.substring(lastPos));		     lastPos = src.length();		    } else {		     tmp.append(src.substring(lastPos, pos));		     lastPos = pos;		    }		   }		  }		  return tmp.toString();		 }	}